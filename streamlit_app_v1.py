# Carregando os pacotes
import streamlit as st
import pandas as pd 
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# Fun√ß√£o para carregar e limpar o dataset
@st.cache_data
def load_data():
    df_netflix = pd.read_csv("dataset/netflix_titles.csv")

    # Preenchendo as colunas que est√£o em branco
    df_netflix["director"] = df_netflix["director"].fillna("Unknown")
    df_netflix["cast"] = df_netflix["cast"].fillna("Unknown")
    df_netflix["description"] = df_netflix["description"].fillna("No description available!")
    df_netflix["listed_in"] = df_netflix["listed_in"].fillna("Uncategorized")

    # Removendo duplicatas
    df_netflix.drop_duplicates(subset="title", inplace=True)

    # Consolidando as informa√ß√µes das colunas "description", "cast", "director" e "listed_in" em uma √∫nica coluna.
    df_netflix["combined_features"] = (df_netflix["description"]+" "+
                                   df_netflix["cast"]+" "+
                                   df_netflix["director"]+" "+
                                   df_netflix["listed_in"]
                                  )

    return df_netflix

# Fun√ß√£o para criar o sistema de recomenda√ß√£o
def get_recommendations(title, cosine_sim, df):
    
    # Obter o √≠ndice do filme a partir do t√≠tulo
    indices = pd.Series(df.index, index=df["title"]).drop_duplicates()
    if title not in indices:
        return ["T√≠tulo n√£o encontrado. Por favor, tente outro."]
    idx = indices[title]

    # Para obter a similaridade do filme fornecido com todos os outros
    sim_scores = list(enumerate(cosine_sim[idx]))

    # Retorna uma lista ordenada de tuplas com os √≠ndices e similaridades de 5 t√≠tulos
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)[1:6]

    # Para selecionar os √≠ndices dos 5 filmes mais similares
    movie_indices = [i[0] for i in sim_scores]

    # Retorna a lista com os t√≠tulos dos filmes mais similares ao t√≠tulo fornecido
    return df["title"].iloc[movie_indices].tolist()

# Apliicativo no Streamlit
def main():
    st.title("Sistema de Recomenda√ß√£o de Filmes e S√©ries üé•")
    st.write("Digite ou selecione um t√≠tulo para obter recomenda√ß√µes.")

    # Chamando a fun√ß√£o para  carregar os dados
    df = load_data()

    # Criando a matriz TF-IDF
    tfidf = TfidfVectorizer(stop_words = "english")
    matrix = tfidf.fit_transform(df["combined_features"])
    cosine_sim = cosine_similarity(matrix, matrix)

    # Campo para sele√ß√£o de t√≠tulo
    title = st.selectbox("Selecione um t√≠tulo:", df["title"].unique())

    # Bot√£o para gerar recomenda√ß√µes
    if st.button("Mostrar recomenda√ß√µes"):
        recommendations = get_recommendations(title, cosine_sim, df)
        st.write("Filmes/S√©ries recomendados:")
        for rec in recommendations:
            st.write(f" - {rec}")

if __name__ =="__main__":
    main()
